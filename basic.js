/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var basic = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"line":3,"INTEGER":4,"REM":5,"statement":6,"EOF":7,"LET":8,"identifier":9,"EQ":10,"exp":11,"PRINT":12,"print_exp_list":13,"SEMICOLON":14,"ASSERT":15,"num_exp":16,"IF":17,"THEN":18,"GO":19,"TO":20,"GOTO":21,"DIM":22,"dim_exp":23,"FOR":24,"NUM_VARIABLE":25,"NEXT":26,"GOSUB":27,"RETURN":28,"DATA":29,"data_exp_list":30,"READ":31,"read_list":32,"FILE":33,"file_assign_list":34,"WRITE":35,"NUM":36,",":37,"RESTORE":38,"INPUT":39,"STOP":40,"END":41,"BASE":42,"str_exp":43,"num_identifier":44,"str_identifier":45,"array_addendum":46,"STR_VARIABLE":47,"(":48,"num_exp_list":49,")":50,"-":51,"+":52,"/":53,"*":54,"LE":55,"GE":56,"GT":57,"LT":58,"NE":59,"OR":60,"AND":61,"INT":62,"RND":63,"SQR":64,"ABS":65,"CLK":66,"NUMBER":67,"REAL":68,"STR_CONSTANT":69,"data_exp":70,"print_exp":71,"dim_entry":72,"exp_list":73,"$accept":0,"$end":1},
terminals_: {2:"error",4:"INTEGER",5:"REM",7:"EOF",8:"LET",10:"EQ",12:"PRINT",14:"SEMICOLON",15:"ASSERT",17:"IF",18:"THEN",19:"GO",20:"TO",21:"GOTO",22:"DIM",24:"FOR",25:"NUM_VARIABLE",26:"NEXT",27:"GOSUB",28:"RETURN",29:"DATA",31:"READ",33:"FILE",35:"WRITE",36:"NUM",37:",",38:"RESTORE",39:"INPUT",40:"STOP",41:"END",42:"BASE",47:"STR_VARIABLE",48:"(",50:")",51:"-",52:"+",53:"/",54:"*",55:"LE",56:"GE",57:"GT",58:"LT",59:"NE",60:"OR",61:"AND",62:"INT",63:"RND",64:"SQR",65:"ABS",66:"CLK",67:"NUMBER",68:"REAL",69:"STR_CONSTANT"},
productions_: [0,[3,2],[3,3],[3,1],[6,4],[6,3],[6,2],[6,3],[6,2],[6,4],[6,5],[6,2],[6,3],[6,2],[6,6],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,5],[6,3],[6,5],[6,2],[6,1],[6,1],[6,2],[34,4],[34,6],[32,3],[32,1],[9,1],[9,1],[44,1],[44,2],[45,1],[45,2],[46,3],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,4],[16,4],[16,4],[16,4],[16,4],[16,1],[16,1],[16,1],[16,1],[43,1],[43,3],[43,1],[30,1],[30,3],[70,1],[70,1],[70,1],[13,0],[13,1],[13,3],[13,3],[71,1],[71,1],[23,3],[23,1],[72,4],[72,4],[73,1],[73,3],[11,1],[11,1],[49,1],[49,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return { line_number: Number($$[$0-1]), f: function() {}, data:[]}; 
break;
case 2: return { line_number: Number($$[$0-2]), f: $$[$0-1], data: $$[$0-1].data }; 
break;
case 3: return { f: function() {} }; 
break;
case 4:
    this.$ = bind_f(function(state) {
            state.vars[$$[$0-2](state)] = $$[$0](state);
        });

break;
case 5:
    this.$ = bind_f(function(state) {
            state.vars[$$[$0-2](state)] = $$[$0](state);
        });

break;
case 6:
    this.$ = bind_f(function(state) {
          var idx;
          var s = '';
          for (idx=0;idx<$$[$0].length;idx++) {
              s += $$[$0][idx](state);
          }
          s += "\n";
          state.print(s);
      });

break;
case 7:
    this.$ = bind_f(function(state) {
        var idx;
        var s = '';
        for (idx=0;idx<$$[$0-1].length;idx++) {
            s += $$[$0-1][idx](state);
        }
        state.print(s);
      });

break;
case 8:
    this.$ = bind_f(function(state) {
            if (!$$[$0](state)) {
                console.log("state:");
                console.log(state);
                throw "assertion failed in " + state.program[state.line_index-1].line_number;
            }
        });

break;
case 9:
    this.$ = bind_f(function(state) {
        if ($$[$0-2](state)) {
            state.goto($$[$0]);
        }
    });

break;
case 10:
    this.$ = bind_f(function(state) {
        if ($$[$0-3](state)) {
            state.goto($$[$0]);
        }
    });

break;
case 11:
    this.$ = bind_f(function(state) {
        state.goto($$[$0]);
    });

break;
case 12:
    this.$ = bind_f(function(state) {
        state.goto($$[$0]);
    });

break;
case 13:
    this.$ = $$[$0];

break;
case 14:
    this.$ = bind_f(function (state) {
        state.for_state[$$[$0-4]] = { v: $$[$0-4], m: $$[$0](state), step:1, p: state.line_index };
        state.vars[$$[$0-4]] = $$[$0-2](state);
    });

break;
case 15:
    this.$ = bind_f(function(state) {
            var for_state = state.for_state[$$[$0]];
            if (state.vars[$$[$0]] < for_state.m) {
                state.vars[$$[$0]] += for_state.step;
                state.line_index = for_state.p;
            } else {
                // remove for_item
                delete state.for_state[$$[$0]];
            }
        })

break;
case 16:
    this.$ = bind_f(function(state) {
           state.return_positions.push(state.line_index);
           state.line_index = state.line_lookup[Number($$[$0])];
        })

break;
case 17:
    this.$ = function(state) {
        state.line_index = state.return_positions.pop();
    }

break;
case 18:
    this.$ = function(state) {};
    this.$.data = $$[$0];
    console.log($$[$0]);

break;
case 19:
    this.$ = bind_f(function(state) {
        var idx;
        for (idx=0;idx<$$[$0].length;idx++) {
            var v = $$[$0][idx](state);
            state.vars[v] = state.read_data();
        }
    });

break;
case 20:
    this.$ = $$[$0];

break;
case 21:
    this.$ = bind_f(function(state) {
        var number = $$[$0-2](state);
        var list = [$$[$0](state)];
        state.write_num(number, list);
    });

break;
case 22:
    this.$ = bind_f(function(state) {
        var N = $$[$0](state);
        state.restore_num(N);
    });

break;
case 23:
    this.$ = bind_f(function(state) {
        var number = $$[$0-2](state);
        var idx;
        for (idx=0;idx<$$[$0].length;idx++) {
            var v = $$[$0][idx](state);
            var val = state.read_num(number);
            state.vars[v] = val;
        }
    });

break;
case 24:
    this.$ = bind_f(function(state) {
        state.input($$[$0]);
    });

break;
case 25: this.$ = function(state) {
        state.running = 0;
    }

break;
case 26: this.$ = function(state) {
        state.running = 0;
    }

break;
case 27:
    this.$ = function() {}

break;
case 28:
    this.$ = bind_f(function(state) {
        var number = $$[$0-2](state);
        var name = $$[$0](state);
        state.file_num(number, name);
    });

break;
case 29:
    this.$ = bind_f(function(state) {
        var number = $$[$0-4](state);
        var name = $$[$0-2](state);
        state.file_num(number, name);
        $$[$0](state);
    });

break;
case 30:
    this.$ = [$$[$0-2]].concat($$[$0]);

break;
case 31:
    this.$ = [$$[$0]];

break;
case 32:
    this.$ = $$[$0];

break;
case 33:
    this.$ = $$[$0];

break;
case 34:
    this.$ = bind_f(function(state) { return $$[$0] });

break;
case 35:
    this.$ = bind_f(function (state) {
        return $$[$0-1] + $$[$0](state);
    });

break;
case 36:
    this.$ = bind_f(function(state) { return $$[$0] });

break;
case 37:
    this.$ = bind_f(function (state) {
        return $$[$0-1] + $$[$0](state);
    });

break;
case 38:
    this.$ = bind_f(function (state) {
        var s = '';
        var idx;
        for (idx=0; idx<$$[$0-1].length; idx++) {
            s += "_" + $$[$0-1][idx](state);
        }
        return s;
    });

break;
case 39: this.$ = bind_f(function(state) { return -$$[$0](state)}); 
break;
case 40: this.$ = bind_f(function(state) { return $$[$0-2](state) + $$[$0](state); }); 
break;
case 41: this.$ = bind_f(function(state) { return $$[$0-2](state) - $$[$0](state); }); 
break;
case 42: this.$ = bind_f(function(state) { return $$[$0-2](state) / $$[$0](state); }); 
break;
case 43: this.$ = bind_f(function(state) { return $$[$0-2](state) * $$[$0](state); }); 
break;
case 44: this.$ = bind_f(function(state) { return $$[$0-2](state) == $$[$0](state); }); 
break;
case 45: this.$ = bind_f(function(state) { return $$[$0-2](state) <= $$[$0](state); }); 
break;
case 46: this.$ = bind_f(function(state) { return $$[$0-2](state) >= $$[$0](state); }); 
break;
case 47: this.$ = bind_f(function(state) { return $$[$0-2](state) > $$[$0](state); }); 
break;
case 48: this.$ = bind_f(function(state) { return $$[$0-2](state) < $$[$0](state); }); 
break;
case 49: this.$ = bind_f(function(state) { return $$[$0-2](state) != $$[$0](state); }); 
break;
case 50: this.$ = bind_f(function(state) { return $$[$0-2](state) || $$[$0](state); }); 
break;
case 51: this.$ = bind_f(function(state) { return $$[$0-2](state) && $$[$0](state); }); 
break;
case 52: this.$ = bind_f(function(state) { return $$[$0-2](state) == $$[$0](state); }); 
break;
case 53: this.$ = bind_f(function(state) { return $$[$0-2](state) <= $$[$0](state); }); 
break;
case 54: this.$ = bind_f(function(state) { return $$[$0-2](state) >= $$[$0](state); }); 
break;
case 55: this.$ = bind_f(function(state) { return $$[$0-2](state) > $$[$0](state); }); 
break;
case 56: this.$ = bind_f(function(state) { return $$[$0-2](state) < $$[$0](state); }); 
break;
case 57: this.$ = bind_f(function(state) { return $$[$0-2](state) != $$[$0](state); }); 
break;
case 58: this.$ = $$[$0-1];
break;
case 59: this.$ = bind_f(function(state) { return int($$[$0-1](state)); })
break;
case 60: this.$ = bind_f(function(state) { return rnd($$[$0-1](state)); })
break;
case 61: this.$ = bind_f(function(state) { return Math.sqrt($$[$0-1](state)); })
break;
case 62: this.$ = bind_f(function(state) { return Math.abs($$[$0-1](state)); })
break;
case 63: this.$ = bind_f(function(state) { return clk($$[$0-1](state)); })
break;
case 64:
    this.$ = bind_f(function(state) { return state.vars[$$[$0](state)]; });

break;
case 65: var N = Number(yytext); this.$ = bind_f(function(state) { return N;}); 
break;
case 66: var N = Number(yytext); this.$ = bind_f(function(state) { return N;}); 
break;
case 67: var N = Number(yytext); this.$ = bind_f(function(state) { return N;}); 
break;
case 68:
    this.$ = bind_f(function(state) { return $$[$0].substring(1, $$[$0].length-1); });

break;
case 69: this.$ = bind_f(function(state) { return $$[$0-2](state) + $$[$0](state); }); 
break;
case 70:
    this.$ = bind_f(function(state) { return state.vars[$$[$0](state)]; });

break;
case 71: this.$ = [$$[$0]]; 
break;
case 72: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 73:
    this.$ = $$[$0].substring(1, $$[$0].length-1);

break;
case 74:
    this.$ = Number($$[$0]);

break;
case 75:
    this.$ = Number($$[$0]);

break;
case 76:
    this.$ = [];

break;
case 77:
    this.$ = [$$[$0]];

break;
case 78:
    this.$ = [$$[$0-2]].concat($$[$0]);

break;
case 79:
    this.$ = [$$[$0-2]].concat($$[$0]);

break;
case 80:
    this.$ = $$[$0];

break;
case 81:
    this.$ = $$[$0];

break;
case 84:
    this.$ = bind_f(function(state) {
        dim(state, $$[$0-3], $$[$0-1].map(function (v) { return v(state); }), 0);
    });

break;
case 85:
    this.$ = bind_f(function(state) {
        dim(state, $$[$0-3], $$[$0-1].map(function (v) { return v(state); }), "");
    });

break;
case 86:
    this.$ = [$$[$0]];

break;
case 87:
    this.$ = [$$[$0-2]].concat($$[$0]);

break;
case 88:
    this.$ = $$[$0];

break;
case 89:
    this.$ = $$[$0];

break;
case 90:
    this.$ = [$$[$0]];

break;
case 91:
    this.$ = [$$[$0-2]].concat($$[$0]);

break;
}
},
table: [{3:1,4:[1,2],7:[1,3]},{1:[3]},{5:[1,4],6:5,8:[1,6],9:7,12:[1,8],15:[1,9],17:[1,10],19:[1,12],21:[1,11],22:[1,13],24:[1,14],25:[1,29],26:[1,15],27:[1,16],28:[1,17],29:[1,18],31:[1,19],33:[1,20],35:[1,21],38:[1,22],39:[1,23],40:[1,24],41:[1,25],42:[1,26],44:27,45:28,47:[1,30]},{1:[2,3]},{1:[2,1]},{7:[1,31]},{9:32,25:[1,29],44:27,45:28,47:[1,30]},{10:[1,33]},{4:[1,47],7:[2,76],13:34,14:[2,76],16:36,25:[1,29],43:37,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49],71:35},{4:[1,47],16:51,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:53,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,54]},{20:[1,55]},{23:56,25:[1,58],47:[1,59],72:57},{25:[1,60]},{25:[1,61]},{4:[1,62]},{7:[2,17]},{4:[1,66],30:63,68:[1,67],69:[1,65],70:64},{9:70,25:[1,29],32:68,36:[1,69],44:27,45:28,47:[1,30]},{34:71,36:[1,72]},{36:[1,73]},{36:[1,74]},{9:70,25:[1,29],32:75,44:27,45:28,47:[1,30]},{7:[2,25]},{7:[2,26]},{4:[1,47],16:76,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{7:[2,32],10:[2,32],37:[2,32]},{7:[2,33],10:[2,33],37:[2,33]},{7:[2,34],10:[2,34],14:[2,34],18:[2,34],19:[2,34],20:[2,34],37:[2,34],46:77,48:[1,78],50:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34],55:[2,34],56:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34],61:[2,34]},{7:[2,36],10:[2,36],14:[2,36],18:[2,36],19:[2,36],20:[2,36],37:[2,36],46:79,48:[1,78],50:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[2,36],55:[2,36],56:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36],61:[2,36]},{1:[2,2]},{10:[1,80]},{4:[1,47],11:81,16:82,25:[1,29],43:83,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{7:[2,6],14:[1,84]},{7:[2,77],14:[1,85],37:[1,86]},{7:[2,80],10:[1,91],14:[2,80],37:[2,80],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{7:[2,81],10:[1,99],14:[2,81],37:[2,81],52:[1,105],55:[1,100],56:[1,101],57:[1,102],58:[1,103],59:[1,104]},{4:[1,47],16:106,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:107,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{48:[1,108]},{48:[1,109]},{48:[1,110]},{48:[1,111]},{48:[1,112]},{7:[2,64],10:[2,64],14:[2,64],18:[2,64],19:[2,64],20:[2,64],37:[2,64],50:[2,64],51:[2,64],52:[2,64],53:[2,64],54:[2,64],55:[2,64],56:[2,64],57:[2,64],58:[2,64],59:[2,64],60:[2,64],61:[2,64]},{7:[2,65],10:[2,65],14:[2,65],18:[2,65],19:[2,65],20:[2,65],37:[2,65],50:[2,65],51:[2,65],52:[2,65],53:[2,65],54:[2,65],55:[2,65],56:[2,65],57:[2,65],58:[2,65],59:[2,65],60:[2,65],61:[2,65]},{7:[2,66],10:[2,66],14:[2,66],18:[2,66],19:[2,66],20:[2,66],37:[2,66],50:[2,66],51:[2,66],52:[2,66],53:[2,66],54:[2,66],55:[2,66],56:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],61:[2,66]},{7:[2,67],10:[2,67],14:[2,67],18:[2,67],19:[2,67],20:[2,67],37:[2,67],50:[2,67],51:[2,67],52:[2,67],53:[2,67],54:[2,67],55:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67]},{7:[2,68],10:[2,68],14:[2,68],18:[2,68],19:[2,68],20:[2,68],37:[2,68],50:[2,68],51:[2,68],52:[2,68],53:[2,68],54:[2,68],55:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68]},{7:[2,70],10:[2,70],14:[2,70],18:[2,70],19:[2,70],20:[2,70],37:[2,70],50:[2,70],51:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70]},{7:[2,8],10:[1,91],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{10:[1,99],52:[1,105],55:[1,100],56:[1,101],57:[1,102],58:[1,103],59:[1,104]},{10:[1,91],18:[1,113],19:[1,114],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{7:[2,11]},{4:[1,115]},{7:[2,13]},{7:[2,83],37:[1,116]},{48:[1,117]},{48:[1,118]},{10:[1,119]},{7:[2,15]},{7:[2,16]},{7:[2,18]},{7:[2,71],37:[1,120]},{7:[2,73],37:[2,73]},{7:[2,74],37:[2,74]},{7:[2,75],37:[2,75]},{7:[2,19]},{4:[1,47],16:121,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{7:[2,31],37:[1,122]},{7:[2,20]},{4:[1,47],16:123,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:124,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:125,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{7:[2,24]},{7:[2,27],10:[1,91],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{7:[2,35],10:[2,35],14:[2,35],18:[2,35],19:[2,35],20:[2,35],37:[2,35],50:[2,35],51:[2,35],52:[2,35],53:[2,35],54:[2,35],55:[2,35],56:[2,35],57:[2,35],58:[2,35],59:[2,35],60:[2,35],61:[2,35]},{4:[1,47],16:127,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],49:126,51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{7:[2,37],10:[2,37],14:[2,37],18:[2,37],19:[2,37],20:[2,37],37:[2,37],50:[2,37],51:[2,37],52:[2,37],53:[2,37],54:[2,37],55:[2,37],56:[2,37],57:[2,37],58:[2,37],59:[2,37],60:[2,37],61:[2,37]},{4:[1,47],11:128,16:82,25:[1,29],43:83,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{7:[2,5]},{7:[2,88],10:[1,91],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{7:[2,89],10:[1,99],52:[1,105],55:[1,100],56:[1,101],57:[1,102],58:[1,103],59:[1,104]},{7:[2,7]},{4:[1,47],7:[2,76],13:129,14:[2,76],16:36,25:[1,29],43:37,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49],71:35},{4:[1,47],7:[2,76],13:130,14:[2,76],16:36,25:[1,29],43:37,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49],71:35},{4:[1,47],16:131,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:132,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:133,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:134,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:135,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:136,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:137,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:138,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:139,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:140,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:141,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:142,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{43:143,45:50,47:[1,30],69:[1,49]},{43:144,45:50,47:[1,30],69:[1,49]},{43:145,45:50,47:[1,30],69:[1,49]},{43:146,45:50,47:[1,30],69:[1,49]},{43:147,45:50,47:[1,30],69:[1,49]},{43:148,45:50,47:[1,30],69:[1,49]},{43:149,45:50,47:[1,30],69:[1,49]},{7:[2,39],10:[1,91],14:[2,39],18:[2,39],19:[2,39],20:[2,39],37:[2,39],50:[2,39],51:[2,39],52:[2,39],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[2,39],61:[2,39]},{10:[1,91],50:[1,150],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{4:[1,47],16:151,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:152,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:153,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:154,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:155,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,156]},{20:[1,157]},{7:[2,12]},{23:158,25:[1,58],47:[1,59],72:57},{4:[1,47],16:127,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],49:159,51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:127,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],49:160,51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],16:161,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,66],30:162,68:[1,67],69:[1,65],70:64},{10:[1,91],37:[1,163],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{9:70,25:[1,29],32:164,44:27,45:28,47:[1,30]},{10:[1,165],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{10:[1,91],37:[1,166],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{7:[2,22],10:[1,91],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{50:[1,167]},{10:[1,91],37:[1,168],50:[2,90],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{7:[2,4]},{7:[2,78],14:[2,78]},{7:[2,79],14:[2,79]},{7:[2,40],10:[1,91],14:[2,40],18:[2,40],19:[2,40],20:[2,40],37:[2,40],50:[2,40],51:[2,40],52:[2,40],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[2,40],61:[2,40]},{7:[2,41],10:[1,91],14:[2,41],18:[2,41],19:[2,41],20:[2,41],37:[2,41],50:[2,41],51:[2,41],52:[2,41],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[2,41],61:[2,41]},{7:[2,42],10:[1,91],14:[2,42],18:[2,42],19:[2,42],20:[2,42],37:[2,42],50:[2,42],51:[2,42],52:[2,42],53:[2,42],54:[2,42],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[2,42],61:[2,42]},{7:[2,43],10:[1,91],14:[2,43],18:[2,43],19:[2,43],20:[2,43],37:[2,43],50:[2,43],51:[2,43],52:[2,43],53:[2,43],54:[2,43],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[2,43],61:[2,43]},{7:[2,44],10:[2,44],14:[2,44],18:[2,44],19:[2,44],20:[2,44],37:[2,44],50:[2,44],51:[2,44],52:[2,44],53:[2,44],54:[2,44],55:[2,44],56:[2,44],57:[2,44],58:[2,44],59:[2,44],60:[2,44],61:[2,44]},{7:[2,45],10:[2,45],14:[2,45],18:[2,45],19:[2,45],20:[2,45],37:[2,45],50:[2,45],51:[2,45],52:[2,45],53:[2,45],54:[2,45],55:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[2,45],61:[2,45]},{7:[2,46],10:[2,46],14:[2,46],18:[2,46],19:[2,46],20:[2,46],37:[2,46],50:[2,46],51:[2,46],52:[2,46],53:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46],61:[2,46]},{7:[2,47],10:[2,47],14:[2,47],18:[2,47],19:[2,47],20:[2,47],37:[2,47],50:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47]},{7:[2,48],10:[2,48],14:[2,48],18:[2,48],19:[2,48],20:[2,48],37:[2,48],50:[2,48],51:[2,48],52:[2,48],53:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48]},{7:[2,49],10:[2,49],14:[2,49],18:[2,49],19:[2,49],20:[2,49],37:[2,49],50:[2,49],51:[2,49],52:[2,49],53:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],61:[2,49]},{7:[2,50],10:[1,91],14:[2,50],18:[2,50],19:[2,50],20:[2,50],37:[2,50],50:[2,50],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[2,50],61:[2,50]},{7:[2,51],10:[1,91],14:[2,51],18:[2,51],19:[2,51],20:[2,51],37:[2,51],50:[2,51],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[2,51],61:[2,51]},{7:[2,52],10:[2,52],14:[2,52],18:[2,52],19:[2,52],20:[2,52],37:[2,52],50:[2,52],51:[2,52],52:[2,52],53:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52]},{7:[2,53],10:[2,53],14:[2,53],18:[2,53],19:[2,53],20:[2,53],37:[2,53],50:[2,53],51:[2,53],52:[2,53],53:[2,53],54:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[2,53]},{7:[2,54],10:[2,54],14:[2,54],18:[2,54],19:[2,54],20:[2,54],37:[2,54],50:[2,54],51:[2,54],52:[2,54],53:[2,54],54:[2,54],55:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54]},{7:[2,55],10:[2,55],14:[2,55],18:[2,55],19:[2,55],20:[2,55],37:[2,55],50:[2,55],51:[2,55],52:[2,55],53:[2,55],54:[2,55],55:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[2,55]},{7:[2,56],10:[2,56],14:[2,56],18:[2,56],19:[2,56],20:[2,56],37:[2,56],50:[2,56],51:[2,56],52:[2,56],53:[2,56],54:[2,56],55:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[2,56]},{7:[2,57],10:[2,57],14:[2,57],18:[2,57],19:[2,57],20:[2,57],37:[2,57],50:[2,57],51:[2,57],52:[2,57],53:[2,57],54:[2,57],55:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],61:[2,57]},{7:[2,69],10:[2,69],14:[2,69],18:[2,69],19:[2,69],20:[2,69],37:[2,69],50:[2,69],51:[2,69],52:[2,69],53:[2,69],54:[2,69],55:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69]},{7:[2,58],10:[2,58],14:[2,58],18:[2,58],19:[2,58],20:[2,58],37:[2,58],50:[2,58],51:[2,58],52:[2,58],53:[2,58],54:[2,58],55:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],61:[2,58]},{10:[1,91],50:[1,169],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{10:[1,91],50:[1,170],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{10:[1,91],50:[1,171],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{10:[1,91],50:[1,172],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{10:[1,91],50:[1,173],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{7:[2,9]},{4:[1,174]},{7:[2,82]},{50:[1,175]},{50:[1,176]},{10:[1,91],20:[1,177],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{7:[2,72]},{9:70,25:[1,29],32:178,44:27,45:28,47:[1,30]},{7:[2,30]},{4:[1,47],16:135,25:[1,29],43:179,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{4:[1,47],11:180,16:82,25:[1,29],43:83,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{7:[2,38],10:[2,38],14:[2,38],18:[2,38],19:[2,38],20:[2,38],37:[2,38],50:[2,38],51:[2,38],52:[2,38],53:[2,38],54:[2,38],55:[2,38],56:[2,38],57:[2,38],58:[2,38],59:[2,38],60:[2,38],61:[2,38]},{4:[1,47],16:127,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],49:181,51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{7:[2,59],10:[2,59],14:[2,59],18:[2,59],19:[2,59],20:[2,59],37:[2,59],50:[2,59],51:[2,59],52:[2,59],53:[2,59],54:[2,59],55:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],61:[2,59]},{7:[2,60],10:[2,60],14:[2,60],18:[2,60],19:[2,60],20:[2,60],37:[2,60],50:[2,60],51:[2,60],52:[2,60],53:[2,60],54:[2,60],55:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60]},{7:[2,61],10:[2,61],14:[2,61],18:[2,61],19:[2,61],20:[2,61],37:[2,61],50:[2,61],51:[2,61],52:[2,61],53:[2,61],54:[2,61],55:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[2,61]},{7:[2,62],10:[2,62],14:[2,62],18:[2,62],19:[2,62],20:[2,62],37:[2,62],50:[2,62],51:[2,62],52:[2,62],53:[2,62],54:[2,62],55:[2,62],56:[2,62],57:[2,62],58:[2,62],59:[2,62],60:[2,62],61:[2,62]},{7:[2,63],10:[2,63],14:[2,63],18:[2,63],19:[2,63],20:[2,63],37:[2,63],50:[2,63],51:[2,63],52:[2,63],53:[2,63],54:[2,63],55:[2,63],56:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],61:[2,63]},{7:[2,10]},{7:[2,84],37:[2,84]},{7:[2,85],37:[2,85]},{4:[1,47],16:182,25:[1,29],43:52,44:45,45:50,47:[1,30],48:[1,39],51:[1,38],62:[1,40],63:[1,41],64:[1,42],65:[1,43],66:[1,44],67:[1,46],68:[1,48],69:[1,49]},{7:[2,23]},{7:[2,28],10:[1,99],37:[1,183],52:[1,105],55:[1,100],56:[1,101],57:[1,102],58:[1,103],59:[1,104]},{7:[2,21]},{50:[2,91]},{7:[2,14],10:[1,91],51:[1,88],52:[1,87],53:[1,89],54:[1,90],55:[1,92],56:[1,93],57:[1,94],58:[1,95],59:[1,96],60:[1,97],61:[1,98]},{34:184,36:[1,72]},{7:[2,29]}],
defaultActions: {3:[2,3],4:[2,1],17:[2,17],24:[2,25],25:[2,26],31:[2,2],54:[2,11],56:[2,13],61:[2,15],62:[2,16],63:[2,18],68:[2,19],71:[2,20],75:[2,24],81:[2,5],84:[2,7],115:[2,12],128:[2,4],156:[2,9],158:[2,82],162:[2,72],164:[2,30],174:[2,10],178:[2,23],180:[2,21],181:[2,91],184:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function bind_f(f) {
    var new_f = function (state) {
        return f(state);
    }
    return new_f;
}

function var_lookup(v, indices) {
    var idx;
    for (idx=0;idx<indices.length;idx++) {
        v = v + "_" + indices[idx];
    }
    return v;
}

function dim(state, v, index_list, init_val) {
    var il = index_list.map(function() { return 0; });
    var going = 1;
    while (going) {
        state.vars[var_lookup(v, il)] = init_val;
        var idx = 0;
        while (1) {
            il[idx] += 1;
            if (il[idx] <= index_list[idx]) {
                break;
            }
            il[idx] = 0;
            idx += 1;
            if (idx >= il.length) {
                return;
            }
        }
    }
}

function int(v) {
    return Math.floor(v);
}

function rnd(v) {
    return Math.random();
}

function clk(v) {
    return 0.5;
}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "STR_CONSTANT";
break;
case 1:/* skip whitespace */
break;
case 2:return 68;
break;
case 3:return 4;
break;
case 4:return 54;
break;
case 5:return 53;
break;
case 6:return 51;
break;
case 7:return 52;
break;
case 8:return '^';
break;
case 9:return 59;
break;
case 10:return 55;
break;
case 11:return 58;
break;
case 12:return 56;
break;
case 13:return 57;
break;
case 14:return 59;
break;
case 15:return 48;
break;
case 16:return 50;
break;
case 17:return "NUM";
break;
case 18:return "SEMICOLON";
break;
case 19:return ",";
break;
case 20:return "NL";
break;
case 21:return "EQ";
break;
case 22:return "IF";
break;
case 23:return "THEN";
break;
case 24:return "GOTO";
break;
case 25:return "GO";
break;
case 26:return "TO";
break;
case 27:return "PRINT";
break;
case 28:return "STOP";
break;
case 29:return "END";
break;
case 30:return "LET";
break;
case 31:return "BASE";
break;
case 32:return "DIM";
break;
case 33:return "INPUT";
break;
case 34:return "FOR";
break;
case 35:return "NEXT";
break;
case 36:return "GOSUB";
break;
case 37:return "RETURN";
break;
case 38:return "READ";
break;
case 39:return "DATA";
break;
case 40:return "FILE";
break;
case 41:return "WRITE";
break;
case 42:return "RESTORE";
break;
case 43:return "REM";
break;
case 44:return "OR";
break;
case 45:return "AND";
break;
case 46:return "ASSERT";
break;
case 47:return "INT";
break;
case 48:return "RND";
break;
case 49:return "ABS";
break;
case 50:return "CLK";
break;
case 51:return "SQR";
break;
case 52:return "TO";
break;
case 53:return 47
break;
case 54:return 25
break;
case 55:return 7;
break;
}
},
rules: [/^(?:"[^\"]*")/,/^(?:\s+)/,/^(?:[0-9]*(\.[0-9]+))/,/^(?:[0-9]+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:<>)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\()/,/^(?:\))/,/^(?:#)/,/^(?:;)/,/^(?:,)/,/^(?:\n)/,/^(?:=)/,/^(?:IF\b)/,/^(?:THEN\b)/,/^(?:GOTO\b)/,/^(?:GO\b)/,/^(?:TO\b)/,/^(?:PRINT\b)/,/^(?:STOP\b)/,/^(?:END\b)/,/^(?:LET\b)/,/^(?:BASE\b)/,/^(?:DIM\b)/,/^(?:INPUT\b)/,/^(?:FOR\b)/,/^(?:NEXT\b)/,/^(?:GOSUB\b)/,/^(?:RETURN\b)/,/^(?:READ\b)/,/^(?:DATA\b)/,/^(?:FILE\b)/,/^(?:WRITE\b)/,/^(?:RESTORE\b)/,/^(?:REM\b)/,/^(?:OR\b)/,/^(?:AND\b)/,/^(?:ASSERT\b)/,/^(?:INT\b)/,/^(?:RND\b)/,/^(?:ABS\b)/,/^(?:CLK\b)/,/^(?:SQR\b)/,/^(?:TO\b)/,/^(?:[A-Z][A-Z0-9]?\$)/,/^(?:[A-Z][A-Z0-9]?)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = basic;
exports.Parser = basic.Parser;
exports.parse = function () { return basic.parse.apply(basic, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}